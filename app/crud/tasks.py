from typing import Optional

from sqlalchemy.orm import Session

from app.models.task_model import Task
from app.schemas.taskbase import TaskCreate, TaskUpdate


def create_task(db: Session, task: TaskCreate):
    """
    Creates a new task in the database.

    Args:
        db: The SQLAlchemy session object.
        task: The Pydantic schema with task data.

    Returns:
        The created task object from the DB.
    """
    # Create an instance of the SQLAlchemy model from the Pydantic data.
    db_task = Task(**task.model_dump())

    # Add the object to the session.
    db.add(db_task)

    # Commit the transaction to save the object to the DB.
    db.commit()

    # Refresh the object to get the ID generated by the DB.
    db.refresh(db_task)

    return db_task


def get_tasks(db: Session, completed: Optional[bool] = None):
    """
    Retrieves all tasks from the database.

    Args:
        db: The SQLAlchemy session object.
        completed: Optional filter to retrieve only completed or uncompleted tasks.

    Returns:
        A list of task objects.
    """
    query = db.query(Task)
    print(f"Received filter for completed: {completed}")
    if completed is not None:
        query = query.filter(Task.completed == completed)
    return query.all()


def get_task_by_id(task_id: int, db: Session):
    """
    Retrieves a single task by its ID.

    Args:
        db: The SQLAlchemy session object.
        task_id: The ID of the task.

    Returns:
        The task object or None if the task is not found.
    """
    return db.query(Task).filter(Task.id == task_id).first()


def update_task(
    task_id: int,
    task_data: TaskUpdate,
    db: Session,
):
    """
    Updates an existing task.

    Args:
        db: The SQLAlchemy session object.
        task_id: The ID of the task to update.
        task_data: The Pydantic schema with the updated data.

    Returns:
        The updated task object or None if the task is not found.
    """
    db_task = db.query(Task).filter(Task.id == task_id).first()
    if not db_task:
        return None

    # Update the fields using .model_dump() with exclude_unset=True.
    # This ensures that only the fields sent in the request are updated.
    for key, value in task_data.model_dump(exclude_unset=True).items():
        setattr(db_task, key, value)

    db.commit()
    db.refresh(db_task)
    return db_task


def delete_task(task_id: int, db: Session):
    """
    Deletes a task from the database.

    Args:
        db: The SQLAlchemy session object.
        task_id: The ID of the task to delete.

    Returns:
        The deleted task object or None if the task is not found.
    """
    db_task = db.query(Task).filter(Task.id == task_id).first()
    if db_task:
        db.delete(db_task)
        db.commit()
    return db_task
